{type:"class",attributes:{"name":"Collection","packageName":"qx.bom","superClass":"qx.type.BaseArray","fullName":"qx.bom.Collection","type":"class"},children:[{type:"desc",attributes:{"text":"<p>Wraps a set of elements and offers a whole set of features to query or modify them.</p>\n\n<p><strong>Chaining</strong></p>\n\n<p>The collection uses an interesting concept called a &#8220;Builder&#8221; to make\nits code short and simple. The Builder pattern is an object-oriented\nprogramming design pattern that has been gaining popularity.</p>\n\n<p>In a nutshell: Every method on the collection returns the collection object itself,\nallowing you to &#8216;chain&#8217; upon it, for example:</p>\n\n<pre class=\"javascript\">\nqx.bom.Collection.query(\"a\").addClass(\"test\")\n  .setStyle(\"visibility\", \"visible\").setAttribute(\"html\", \"foo\");\n</pre>\n\n<p><strong>Content Manipulation</strong></p>\n\n<p>Most methods that accept &#8220;content&#8221; will accept one or more\narguments of any of the following:</p>\n\n<ul>\n<li>A <span class=\"caps\">DOM</span> node element</li>\n<li>An array of <span class=\"caps\">DOM</span> node elements</li>\n<li>A collection</li>\n<li>A string representing <span class=\"caps\">HTML</span></li>\n</ul>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">\nqx.bom.Collection.query(\"#div1\").append(\n  document.createElement(\"br\"),\n  qx.bom.Collection.query(\"#div2\"),\n  \"<em>after div2</em>\"\n);\n</pre>\n\n<p>Content inserting methods ({@link #append}, {@link #prepend},\n{@link #before}, {@link #after}, and\n{@link #replaceWith}) behave differently depending on the number of <span class=\"caps\">DOM</span>\nelements currently selected by the collection. If there is only one\nelement in the collection, the content is inserted to that element;\ncontent that was in another location in the <span class=\"caps\">DOM</span> tree will be moved by\nthis operation. This is essentially the same as the W3C <span class=\"caps\">DOM</span>\n<code>appendChild</code> method.</p>\n\n<p>When multiple elements are selected by a collection, these methods\nclone the content before inserting it to each element. Since the\ncontent can only exist in one location in the document tree, cloning\nis required in these cases so that the same content can be used in\nmultiple locations.</p>\n\n<p>This rule also applies to the selector-insertion methods ({@link #appendTo},\n{@link #prependTo}, {@link #insertBefore}, {@link #insertAfter},\nand {@link #replaceAll}), but the auto-cloning occurs if there is more\nthan one element selected by the\nSelector provided as an argument to the method.</p>\n\n<p>When a specific behavior is needed regardless of the number of\nelements selected, use the {@link #clone} or {@link #remove} methods in\nconjunction with a selector-insertion method. This example will always\nclone <code>#Thing</code>, append it to each element with class OneOrMore, and\nleave the original <code>#Thing</code> unmolested in the document:</p>\n\n<pre class=\"javascript\">\nqx.bom.Collection.query(\"#Thing\").clone().appendTo(\".OneOrMore\");\n</pre>\n\n<p>This example will always remove <code>#Thing</code> from the document and append it\nto <code>.OneOrMore</code>:</p>\n\n<pre class=\"javascript\">\nqx.bom.Collection.query(\"#Thing\").remove().appendTo(\".OneOrMore\");\n</pre>"}},{type:"methods-static",children:[{type:"method",attributes:{"isStatic":"true","name":"create"},children:[{type:"params",children:[{type:"param",attributes:{"name":"input"},children:[{type:"desc",attributes:{"text":"<p>Support <span class=\"caps\">HTML</span> elements, <span class=\"caps\">HTML</span> strings and selector strings</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}},{type:"entry",attributes:{"type":"String"}},{type:"entry",attributes:{"type":"Element","dimensions":"1"}}]}]},{type:"param",attributes:{"defaultValue":"document","name":"context"},children:[{type:"desc",attributes:{"text":"<p>Where to start looking for the expression or\n  any element in the document which refers to a valid document to create new elements\n  (useful when dealing with <span class=\"caps\">HTML</span>->Element translation in multi document environments).</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}},{type:"entry",attributes:{"type":"Document"}}]}]}]},{type:"desc",attributes:{"text":"<p>Processes the input and translates it to a collection instance.</p>"}},{type:"see",attributes:{"name":"#query"}},{type:"see",attributes:{"name":"#id"}},{type:"see",attributes:{"name":"#html"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Newly created collection</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"html"},children:[{type:"params",children:[{type:"param",attributes:{"name":"html"},children:[{type:"desc",attributes:{"text":"<p>String containing one or multiple elements or pure text content</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]},{type:"param",attributes:{"defaultValue":"document","name":"context"},children:[{type:"desc",attributes:{"text":"<p>Context in which newly <span class=\"caps\">DOM</span> elements are created from the markup</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}},{type:"entry",attributes:{"type":"Document"}}]}]}]},{type:"desc",attributes:{"text":"<p>Converts a <span class=\"caps\">HTML</span> string into a collection</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Collection containing the create <span class=\"caps\">DOM</span> elements</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"id"},children:[{type:"params",children:[{type:"param",attributes:{"name":"id"},children:[{type:"desc",attributes:{"text":"<p>Identifier for <span class=\"caps\">DOM</span> element to found</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Queries the <span class=\"caps\">DOM</span> for an element matching the given ID. Must not contain\nthe &#8221;#&#8221; like when using the query engine.</p>\n\n<p>This is mainly a wrapper for <code>document.getElementById</code> and\nreturns a collection for easy querying and modification instead of the\npure <span class=\"caps\">DOM</span> node.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Found element wrapped into Collection</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"query"},children:[{type:"params",children:[{type:"param",attributes:{"name":"selector"},children:[{type:"desc",attributes:{"text":"<p><span class=\"caps\">CSS</span> Selector String</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]},{type:"param",attributes:{"defaultValue":"document","name":"context"},children:[{type:"desc",attributes:{"text":"<p>Context element to filter start search in</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}},{type:"entry",attributes:{"type":"Document"}}]}]}]},{type:"desc",attributes:{"text":"<p>Queries the selector engine and returns a new collection\nfor convenient modfication and quering.</p>"}},{type:"see",attributes:{"name":"qx.bom.Selector#query"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Collection instance to wrap found elements</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]}]},{type:"methods",children:[{type:"method",attributes:{"access":"private","name":"__afterCallback"},children:[{type:"params",children:[{type:"param",attributes:{"name":"rel"},children:[{type:"desc",attributes:{"text":"<p>Relative <span class=\"caps\">DOM</span> element (iteration point in selector processing)</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}}]}]},{type:"param",attributes:{"name":"child"},children:[{type:"desc",attributes:{"text":"<p>Child to insert</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}}]}]}]},{type:"desc",attributes:{"text":"<p>Callback for {@link #after} to apply the insertion of content</p>"}}]},{type:"method",attributes:{"access":"private","name":"__appendCallback"},children:[{type:"params",children:[{type:"param",attributes:{"name":"rel"},children:[{type:"desc",attributes:{"text":"<p>Relative <span class=\"caps\">DOM</span> element (iteration point in selector processing)</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}}]}]},{type:"param",attributes:{"name":"child"},children:[{type:"desc",attributes:{"text":"<p>Child to insert</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}}]}]}]},{type:"desc",attributes:{"text":"<p>Callback for {@link #append} to apply the insertion of content</p>"}}]},{type:"method",attributes:{"access":"private","name":"__beforeCallback"},children:[{type:"params",children:[{type:"param",attributes:{"name":"rel"},children:[{type:"desc",attributes:{"text":"<p>Relative <span class=\"caps\">DOM</span> element (iteration point in selector processing)</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}}]}]},{type:"param",attributes:{"name":"child"},children:[{type:"desc",attributes:{"text":"<p>Child to insert</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}}]}]}]},{type:"desc",attributes:{"text":"<p>Callback for {@link #before} to apply the insertion of content</p>"}}]},{type:"method",attributes:{"access":"private","name":"__getInnerHelper"},children:[{type:"params",children:[{type:"param",attributes:{"name":"elem"},children:[{type:"desc",attributes:{"text":"<p>Outer <span class=\"caps\">DOM</span> element</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}}]}]}]},{type:"desc",attributes:{"text":"<p>Finds the deepest child inside the given element</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Inner <span class=\"caps\">DOM</span> element</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}}]}]}]},{type:"method",attributes:{"access":"private","name":"__hierarchyHelper"},children:[{type:"params",children:[{type:"param",attributes:{"name":"method"},children:[{type:"desc",attributes:{"text":"<p>Method name to execute</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]},{type:"param",attributes:{"name":"selector"},children:[{type:"desc",attributes:{"text":"<p>Optional selector to filter the result</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Internal helper to work with hierarchy result arrays.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Collection from all found elements</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"access":"private","name":"__manipulate"},children:[{type:"params",children:[{type:"param",attributes:{"name":"args"},children:[{type:"desc",attributes:{"text":"<p>Array of <span class=\"caps\">DOM</span> elements or <span class=\"caps\">HTML</span> strings</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element","dimensions":"1"}},{type:"entry",attributes:{"type":"String","dimensions":"1"}}]}]},{type:"param",attributes:{"name":"callback"},children:[{type:"desc",attributes:{"text":"<p>Method to execute for each fragment/element created</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Function"}}]}]}]},{type:"desc",attributes:{"text":"<p>Helper method for all <span class=\"caps\">DOM</span> manipulation methods which deal\nwith set of elements or <span class=\"caps\">HTML</span> fragments.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"access":"private","name":"__manipulateTo"},children:[{type:"params",children:[{type:"param",attributes:{"name":"args"},children:[{type:"desc",attributes:{"text":"<p>All arguments (selectors) of the original method call</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String","dimensions":"1"}}]}]},{type:"param",attributes:{"name":"original"},children:[{type:"desc",attributes:{"text":"<p>Name of the original method to wrap</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Helper for wrapping the methods to insert/replace content\nso that they can be used in reverse order (selector is\ngiven to the target method instead)</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"access":"private","name":"__prependCallback"},children:[{type:"params",children:[{type:"param",attributes:{"name":"rel"},children:[{type:"desc",attributes:{"text":"<p>Relative <span class=\"caps\">DOM</span> element (iteration point in selector processing)</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}}]}]},{type:"param",attributes:{"name":"child"},children:[{type:"desc",attributes:{"text":"<p>Child to insert</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}}]}]}]},{type:"desc",attributes:{"text":"<p>Callback for {@link #prepend} to apply the insertion of content</p>"}}]},{type:"method",attributes:{"access":"private","name":"__pushStack"},children:[{type:"params",children:[{type:"param",attributes:{"name":"arr"},children:[{type:"desc",attributes:{"text":"<p>Array to transform into new collection</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Array"}}]}]}]},{type:"desc",attributes:{"text":"<p>Extend the chaining with a new collection, while\nstoring the previous collection to make it accessible\nvia <code>end()</code>.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The newly created collection</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"add"},children:[{type:"params",children:[{type:"param",attributes:{"name":"selector"},children:[{type:"desc",attributes:{"text":"<p>Valid selector (CSS3 + extensions)</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]},{type:"param",attributes:{"name":"context"},children:[{type:"desc",attributes:{"text":"<p>Context element (result elements must be children of this element)</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}}]}]}]},{type:"desc",attributes:{"text":"<p>Adds more elements, matched by the given expression,\nto the set of matched elements.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"qx.bom.Collection"}}]}]}]},{type:"method",attributes:{"name":"addClass"},children:[{type:"params",children:[{type:"param",attributes:{"name":"name"},children:[{type:"desc",attributes:{"text":"<p>The class name to add</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Adds a className to the given element\nIf successfully added the given className will be returned</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"addListener"},children:[{type:"params",children:[{type:"param",attributes:{"name":"type"},children:[{type:"desc",attributes:{"text":"<p>Name of the event e.g. &#8220;click&#8221;, &#8220;keydown&#8221;, ...</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]},{type:"param",attributes:{"name":"listener"},children:[{type:"desc",attributes:{"text":"<p>Event listener function</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Function"}}]}]},{type:"param",attributes:{"name":"self"},children:[{type:"desc",attributes:{"text":"<p>Reference to the &#8216;this&#8217; variable inside\n      the event listener.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Object"}}]}]},{type:"param",attributes:{"name":"capture"},children:[{type:"desc",attributes:{"text":"<p>Whether to attach the event to the\n      capturing phase of the bubbling phase of the event. The default is\n      to attach the event handler to the bubbling phase.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Boolean"}}]}]}]},{type:"desc",attributes:{"text":"<p>Add an event listener to the selected elements. The event listener is passed an\ninstance of {@link Event} containing all relevant information\nabout the event as parameter.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"after"},children:[{type:"params",children:[{type:"param",attributes:{"name":"varargs"},children:[{type:"desc",attributes:{"text":"<p>A reference to an <span class=\"caps\">DOM</span> element or a <span class=\"caps\">HTML</span> string</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}},{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Insert content after each of the matched elements.</p>\n\n<p>Supports lists of <span class=\"caps\">DOM</span> elements or <span class=\"caps\">HTML</span> strings through a variable\nargument list.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"andSelf"},children:[{type:"desc",attributes:{"text":"<p>Add the previous selection to the current selection.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Newly build collection containing the current and\n   and the previous collection.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"append"},children:[{type:"params",children:[{type:"param",attributes:{"name":"varargs"},children:[{type:"desc",attributes:{"text":"<p>A reference to an <span class=\"caps\">DOM</span> element or a <span class=\"caps\">HTML</span> string</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}},{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Append content to the inside of every matched element.</p>\n\n<p>Supports lists of <span class=\"caps\">DOM</span> elements or <span class=\"caps\">HTML</span> strings through a variable\nargument list.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"appendTo"},children:[{type:"params",children:[{type:"param",attributes:{"name":"varargs"},children:[{type:"desc",attributes:{"text":"<p>List of selector expressions</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Append all of the matched elements to another, specified, set of elements.</p>\n\n<p>This operation is, essentially, the reverse of doing a regular\n<code>qx.bom.Collection.query(A).append(B)</code>, in that instead\nof appending B to A, you&#8217;re appending A to B.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"before"},children:[{type:"params",children:[{type:"param",attributes:{"name":"varargs"},children:[{type:"desc",attributes:{"text":"<p>A reference to an <span class=\"caps\">DOM</span> element or a <span class=\"caps\">HTML</span> string</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}},{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Insert content before each of the matched elements.</p>\n\n<p>Supports lists of <span class=\"caps\">DOM</span> elements or <span class=\"caps\">HTML</span> strings through a variable\nargument list.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"children"},children:[{type:"params",children:[{type:"param",attributes:{"defaultValue":"null","name":"selector"},children:[{type:"desc",attributes:{"text":"<p>Optional selector to match</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Get a set of elements containing all of the unique immediate children\nof each of the matched set of elements.</p>\n\n<p>This set can be filtered with an optional expression that will cause\nonly elements matching the selector to be collected.</p>\n\n<p>Also note: while <code>parents()</code> will look at all ancestors,\n<code>children()</code> will only consider immediate child elements.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The new collection</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"clone"},children:[{type:"params",children:[{type:"param",attributes:{"defaultValue":"false","name":"events"},children:[{type:"desc",attributes:{"text":"<p>Whether events should be copied as well</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Boolean"}}]}]}]},{type:"desc",attributes:{"text":"<p>Clone all <span class=\"caps\">DOM</span> elements of the collection and return them in a newly\ncreated collection.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The copied elements</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"closest"},children:[{type:"params",children:[{type:"param",attributes:{"name":"selector"},children:[{type:"desc",attributes:{"text":"<p>Expression to filter the elements with</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Get a set of elements containing the closest parent element\nthat matches the specified selector, the starting element included.</p>\n\n<p>Closest works by first looking at the current element to see if\nit matches the specified expression, if so it just returns the\nelement itself. If it doesn&#8217;t match then it will continue to\ntraverse up the document, parent by parent, until an element\nis found that matches the specified expression. If no matching\nelement is found then none will be returned.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>New collection which contains all interesting parents</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"contents"},children:[{type:"desc",attributes:{"text":"<p>Find all the child nodes inside the matched elements (including text nodes).</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>A new collection containing all child nodes of the previous collection.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"destroy"},children:[{type:"params",children:[{type:"param",attributes:{"defaultValue":"null","name":"selector"},children:[{type:"desc",attributes:{"text":"<p>Selector to filter current collection</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Removes all matched elements from their parent elements,\ncleans up any attached events or data and clears up the Collection\nto free up memory.</p>\n\n<p>The Collection content can be pre-filtered with an optional selector\nexpression.</p>\n\n<p>Modifies the current collection (without pushing the stack) as it\nremoves all elements from the collection which where removed from the <span class=\"caps\">DOM</span>.\nThis normally means all elements in the collection when no selector is given.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"empty"},children:[{type:"desc",attributes:{"text":"<p>Removes all content from the elements</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"end"},children:[{type:"desc",attributes:{"text":"<p>Undone of the last modification of the collection.</p>\n\n<p>These methods change the selection during a chained method call:\n<code>add</code>, <code>children</code>, <code>eq</code>, <code>filter</code>,\n<code>find</code>, <code>gt</code>, <code>lt</code>, <code>next</code>,\n<code>not</code>, <code>parent</code>, <code>parents</code> and <code>siblings</code></p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The previous collection</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"eq"},children:[{type:"params",children:[{type:"param",attributes:{"name":"index"},children:[{type:"desc",attributes:{"text":"<p>The position of the element</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"desc",attributes:{"text":"<p>Reduce the set of matched elements to a single element.</p>\n\n<p>The position of the element in the collection of matched\nelements starts at 0 and goes to length &#8211; 1.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The filtered collection</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"overriddenFrom":"qx.type.BaseArray","name":"filter"},children:[{type:"params",children:[{type:"param",attributes:{"name":"selector"},children:[{type:"desc",attributes:{"text":"<p>An expression or function to filter</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}},{type:"entry",attributes:{"type":"Function"}}]}]},{type:"param",attributes:{"defaultValue":"null","name":"context"},children:[{type:"desc",attributes:{"text":"<p>Optional context for the function to being executed in.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Object"}}]}]}]},{type:"desc",attributes:{"text":"<p>Removes all elements from the set of matched elements that\ndo not match the specified expression(s) or be valid\nafter being tested with the given function.</p>\n\n<p>A selector function is invoked with three arguments: the value of the element, the\nindex of the element, and the Array object being traversed.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The filtered collection</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"find"},children:[{type:"params",children:[{type:"param",attributes:{"name":"selector"},children:[{type:"desc",attributes:{"text":"<p>Selector for children to find</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Searches for all elements that match the specified expression.\nThis method is a good way to find additional descendant\nelements with which to process.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The found elements in a new collection</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"getAttribute"},children:[{type:"params",children:[{type:"param",attributes:{"name":"name"},children:[{type:"desc",attributes:{"text":"<p>Name of the attribute</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Figures out the value of the given attribute of\nthe first element stored in the collection.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The value of the attribute</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"method",attributes:{"name":"getClass"},children:[{type:"desc",attributes:{"text":"<p>Gets the classname of the first selected element</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The retrieved classname</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"method",attributes:{"name":"getContentHeight"},children:[{type:"desc",attributes:{"text":"<p>Returns the content height of the first element in the collection.</p>\n\n<p>The content height is basically the maximum\nheight used or the maximum height which can be used by the content. This\nexcludes all kind of styles of the element like borders, paddings, margins,\nand even scrollbars.</p>\n\n<p>Please note that with visible scrollbars the content height returned\nmay be larger than the box width returned via {@link #getWidth}.</p>\n\n<p>Only works for <span class=\"caps\">DOM</span> elements and not for the window object or the document\nobject!</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Computed content height</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"method",attributes:{"name":"getContentWidth"},children:[{type:"desc",attributes:{"text":"<p>Returns the content width of the first element in the collection.</p>\n\n<p>The content width is basically the maximum\nwidth used or the maximum width which can be used by the content. This\nexcludes all kind of styles of the element like borders, paddings, margins,\nand even scrollbars.</p>\n\n<p>Please note that with visible scrollbars the content width returned\nmay be larger than the box width returned via {@link #getWidth}.</p>\n\n<p>Only works for <span class=\"caps\">DOM</span> elements and not for the window object or the document\nobject!</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Computed content width</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"method",attributes:{"name":"getCss"},children:[{type:"desc",attributes:{"text":"<p>Returns the full content of the style attribute of the first element\nin the collection.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>the full <span class=\"caps\">CSS</span> string</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"method",attributes:{"name":"getHeight"},children:[{type:"desc",attributes:{"text":"<p>Returns the height of the first element in the collection.</p>\n\n<p>This is the rendered height of the element which includes borders and\npaddings like the <code>offsetHeight</code> property in plain <span class=\"caps\">HTML</span>.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The height of the first element</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"method",attributes:{"name":"getOffset"},children:[{type:"params",children:[{type:"param",attributes:{"defaultValue":"box","name":"mode"},children:[{type:"desc",attributes:{"text":"<p>A supported option. See comment above.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Computes the location of the first element in context of\nthe document dimensions.</p>\n\n<p>Supported modes:</p>\n\n<ul>\n<li><code>margin</code>: Calculate from the margin box of the element (bigger than the visual appearance: including margins of given element)</li>\n<li><code>box</code>: Calculates the offset box of the element (default, uses the same size as visible)</li>\n<li><code>border</code>: Calculate the border box (useful to align to border edges of two elements).</li>\n<li><code>scroll</code>: Calculate the scroll box (relevant for absolute positioned content).</li>\n<li><code>padding</code>: Calculate the padding box (relevant for static/relative positioned content).</li>\n</ul>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Returns a map with <code>left</code>, <code>top</code>,\n  <code>right</code> and <code>bottom</code> which contains the distance\n  of the element relative to the document.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Map"}}]}]}]},{type:"method",attributes:{"name":"getOffsetParent"},children:[{type:"desc",attributes:{"text":"<p>Detects the offset parent of the first element</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Detected offset parent capsulated into a new collection instance</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"getScrollLeft"},children:[{type:"desc",attributes:{"text":"<p>Returns the left scroll position of the first element in the collection.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Current left scroll position</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"method",attributes:{"name":"getScrollTop"},children:[{type:"desc",attributes:{"text":"<p>Returns the left scroll position of the first element in the collection.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Current top scroll position</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"method",attributes:{"name":"getStyle"},children:[{type:"params",children:[{type:"param",attributes:{"name":"name"},children:[{type:"desc",attributes:{"text":"<p>Name of the style attribute (js variant e.g. marginTop, wordSpacing)</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]},{type:"param",attributes:{"name":"mode"},children:[{type:"desc",attributes:{"text":"<p>Choose one of the modes supported by {@link qx.bom.element.Style#get}</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Number"}}]}]}]},{type:"desc",attributes:{"text":"<p>Figures out the value of the given style property of\nthe first element stored in the collection.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The value of the style property</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"method",attributes:{"name":"getValue"},children:[{type:"desc",attributes:{"text":"<p>Returns the currently configured value of the first\nelement in the collection.</p>\n\n<p>Works with simple input fields as well as with\nselect boxes or option elements.</p>\n\n<p>Returns an array in cases of multi-selection in\nselect boxes but in all other cases a string.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The value of the first element.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}},{type:"entry",attributes:{"type":"Array"}}]}]}]},{type:"method",attributes:{"name":"getWidth"},children:[{type:"desc",attributes:{"text":"<p>Returns the width of the first element in the collection.</p>\n\n<p>This is the rendered width of the element which includes borders and\npaddings like the <code>offsetWidth</code> property in plain <span class=\"caps\">HTML</span>.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The width of the first element</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"method",attributes:{"name":"hasClass"},children:[{type:"params",children:[{type:"param",attributes:{"name":"name"},children:[{type:"desc",attributes:{"text":"<p>The class name to check for</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Whether the first selected element has the given className.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>true when the element has the given classname</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Boolean"}}]}]}]},{type:"method",attributes:{"name":"insertAfter"},children:[{type:"params",children:[{type:"param",attributes:{"name":"varargs"},children:[{type:"desc",attributes:{"text":"<p>List of selector expressions</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Insert all of the matched elements before another, specified, set of elements.</p>\n\n<p>This operation is, essentially, the reverse of doing a regular\n<code>qx.bom.Collection.query(A).after(B)</code>,  in that instead\nof inserting B to A, you&#8217;re inserting A to B.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"insertBefore"},children:[{type:"params",children:[{type:"param",attributes:{"name":"varargs"},children:[{type:"desc",attributes:{"text":"<p>List of selector expressions</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Insert all of the matched elements after another, specified, set of elements.</p>\n\n<p>This operation is, essentially, the reverse of doing a regular\n<code>qx.bom.Collection.query(A).before(B)</code>, in that instead\nof inserting B to A, you&#8217;re inserting A to B.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"is"},children:[{type:"params",children:[{type:"param",attributes:{"name":"selector"},children:[{type:"desc",attributes:{"text":"<p>Selector to check the content for</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Checks the current selection against an expression\nand returns true, if at least one element of the\nselection fits the given expression.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Whether at least one element matches the given selector</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Boolean"}}]}]}]},{type:"method",attributes:{"name":"next"},children:[{type:"params",children:[{type:"param",attributes:{"defaultValue":"null","name":"selector"},children:[{type:"desc",attributes:{"text":"<p>Optional selector to filter the result</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Get a set of elements containing the unique next siblings of each of the given set of elements.</p>\n\n<code>next</code> only returns the very next sibling for each element, not all next siblings\n(see {@link #nextAll}). Use an optional expression to filter the matched set."}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Collection of all very next siblings of the current collection.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"nextAll"},children:[{type:"params",children:[{type:"param",attributes:{"defaultValue":"null","name":"selector"},children:[{type:"desc",attributes:{"text":"<p>Optional selector to filter the result</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Find all sibling elements after the current element.</p>\n\n<p>Use an optional expression to filter the matched set.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Collection of all siblings following the elements of the current collection.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"not"},children:[{type:"params",children:[{type:"param",attributes:{"name":"selector"},children:[{type:"desc",attributes:{"text":"<p><span class=\"caps\">CSS</span> selector expression</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Removes elements matching the specified expression from the collection.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>A newly created collection where the matching elements\n   have been removed.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"parent"},children:[{type:"params",children:[{type:"param",attributes:{"defaultValue":"null","name":"selector"},children:[{type:"desc",attributes:{"text":"<p>Optional selector to filter the result</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Get a set of elements containing the unique parents of the matched set of elements.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Collection of all unique parent elements.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"parents"},children:[{type:"params",children:[{type:"param",attributes:{"defaultValue":"null","name":"selector"},children:[{type:"desc",attributes:{"text":"<p>Optional selector to filter the result</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Get a set of elements containing the unique ancestors of the matched set of\nelements (except for the root element).</p>\n\n<p>The matched elements can be filtered with an optional expression.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Collection of all unique parent elements.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"prepend"},children:[{type:"params",children:[{type:"param",attributes:{"name":"varargs"},children:[{type:"desc",attributes:{"text":"<p>A reference to an <span class=\"caps\">DOM</span> element or a <span class=\"caps\">HTML</span> string</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}},{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Prepend content to the inside of every matched element.</p>\n\n<p>Supports lists of <span class=\"caps\">DOM</span> elements or <span class=\"caps\">HTML</span> strings through a variable\nargument list.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"prependTo"},children:[{type:"params",children:[{type:"param",attributes:{"name":"varargs"},children:[{type:"desc",attributes:{"text":"<p>List of selector expressions</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Append all of the matched elements to another, specified, set of elements.</p>\n\n<p>This operation is, essentially, the reverse of doing a regular\n<code>qx.bom.Collection.query(A).prepend(B)</code>,  in that instead\nof prepending B to A, you&#8217;re prepending A to B.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"prev"},children:[{type:"params",children:[{type:"param",attributes:{"defaultValue":"null","name":"selector"},children:[{type:"desc",attributes:{"text":"<p>Optional selector to filter the result</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Get a set of elements containing the unique previous siblings of each of the given set of elements.</p>\n\n<code>prev</code> only returns the very previous sibling for each element, not all previous siblings\n(see {@link #prevAll}). Use an optional expression to filter the matched set."}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Collection of all very previous siblings of the current collection.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"prevAll"},children:[{type:"params",children:[{type:"param",attributes:{"defaultValue":"null","name":"selector"},children:[{type:"desc",attributes:{"text":"<p>Optional selector to filter the result</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Find all sibling elements preceding the current element.</p>\n\n<p>Use an optional expression to filter the matched set.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Collection of all siblings preceding the elements of the current collection.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"remove"},children:[{type:"params",children:[{type:"param",attributes:{"defaultValue":"null","name":"selector"},children:[{type:"desc",attributes:{"text":"<p>Selector to filter current collection</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Removes all matched elements from the <span class=\"caps\">DOM</span>. This does <span class=\"caps\">NOT</span> remove them\nfrom the collection object, allowing you to use the matched\nelements further. When a selector is given the list is filtered\nby the selector and the chaining stack is pushed by the new collection.</p>\n\n<p>The Collection content can be pre-filtered with an optional selector\nexpression.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"removeClass"},children:[{type:"params",children:[{type:"param",attributes:{"name":"name"},children:[{type:"desc",attributes:{"text":"<p>The class name to remove</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Removes a className from the given element</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"removeListener"},children:[{type:"params",children:[{type:"param",attributes:{"name":"type"},children:[{type:"desc",attributes:{"text":"<p>Name of the event</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]},{type:"param",attributes:{"name":"listener"},children:[{type:"desc",attributes:{"text":"<p>The pointer to the event listener</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Function"}}]}]},{type:"param",attributes:{"name":"self"},children:[{type:"desc",attributes:{"text":"<p>Reference to the &#8216;this&#8217; variable inside\n      the event listener.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Object"}}]}]},{type:"param",attributes:{"name":"capture"},children:[{type:"desc",attributes:{"text":"<p>Whether to remove the event listener of\n      the bubbling or of the capturing phase.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Boolean"}}]}]}]},{type:"desc",attributes:{"text":"<p>Removes an event listener from the selected elements.</p>\n\n<p>Note: All registered event listeners will automatically be removed from\n  the <span class=\"caps\">DOM</span> at page unload so it is not necessary to detach events yourself.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"replaceAll"},children:[{type:"params",children:[{type:"param",attributes:{"name":"varargs"},children:[{type:"desc",attributes:{"text":"<p>List of selector expressions</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Replaces the elements matched by the specified selector\nwith the matched elements.</p>\n\n<p>This function is the complement to {@link #replaceWith} which does\nthe same task with the parameters reversed.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"replaceClass"},children:[{type:"params",children:[{type:"param",attributes:{"name":"oldName"},children:[{type:"desc",attributes:{"text":"<p>The class name to remove</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]},{type:"param",attributes:{"name":"newName"},children:[{type:"desc",attributes:{"text":"<p>The class name to add</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Replaces the first given class name with the second one</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"replaceWith"},children:[{type:"params",children:[{type:"param",attributes:{"name":"content"},children:[{type:"desc",attributes:{"text":"<p>A reference to an <span class=\"caps\">DOM</span> element or a <span class=\"caps\">HTML</span> string</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Element"}},{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Replaces all matched elements with the specified <span class=\"caps\">HTML</span> or <span class=\"caps\">DOM</span> elements.</p>\n\n<p>This returns the JQuery element that was just replaced, which has been\nremoved from the <span class=\"caps\">DOM</span>.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"resetAttribute"},children:[{type:"params",children:[{type:"param",attributes:{"name":"name"},children:[{type:"desc",attributes:{"text":"<p>Name of the attribute</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Reset the given attribute on all selected elements.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"resetStyle"},children:[{type:"params",children:[{type:"param",attributes:{"name":"name"},children:[{type:"desc",attributes:{"text":"<p>Name of the style attribute (js variant e.g. marginTop, wordSpacing)</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Reset the given style property\non all selected elements.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"setAttribute"},children:[{type:"params",children:[{type:"param",attributes:{"name":"name"},children:[{type:"desc",attributes:{"text":"<p>Name of the attribute</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]},{type:"param",attributes:{"name":"value"},children:[{type:"desc",attributes:{"text":"<p>New value of the attribute</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Modify the given attribute on all selected elements.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"setCss"},children:[{type:"params",children:[{type:"param",attributes:{"name":"value"},children:[{type:"desc",attributes:{"text":"<p>The full <span class=\"caps\">CSS</span> string</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Set the full <span class=\"caps\">CSS</span> content of the style attribute for all elements in the\ncollection.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"setScrollLeft"},children:[{type:"params",children:[{type:"param",attributes:{"name":"value"},children:[{type:"desc",attributes:{"text":"<p>Left scroll position</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"desc",attributes:{"text":"<p>Scrolls the elements of the collection to the given coordinate.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>This collection for chaining</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"setScrollTop"},children:[{type:"params",children:[{type:"param",attributes:{"name":"value"},children:[{type:"desc",attributes:{"text":"<p>Top scroll position</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"desc",attributes:{"text":"<p>Scrolls the elements of the collection to the given coordinate.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>This collection for chaining</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"setStyle"},children:[{type:"params",children:[{type:"param",attributes:{"name":"name"},children:[{type:"desc",attributes:{"text":"<p>Name of the style attribute (js variant e.g. marginTop, wordSpacing)</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]},{type:"param",attributes:{"name":"value"},children:[{type:"desc",attributes:{"text":"<p>The value for the given style</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Modify the given style property\non all selected elements.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"setStyles"},children:[{type:"params",children:[{type:"param",attributes:{"name":"styles"},children:[{type:"desc",attributes:{"text":"<p>a map where the key is the name of the property\n   and the value is the value to use.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Map"}}]}]}]},{type:"desc",attributes:{"text":"<p>Convenience method to modify a set of styles at once.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"setValue"},children:[{type:"params",children:[{type:"param",attributes:{"name":"value"},children:[{type:"desc",attributes:{"text":"<p>Value to apply to each element</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}},{type:"entry",attributes:{"type":"Number"}},{type:"entry",attributes:{"type":"Array"}}]}]}]},{type:"desc",attributes:{"text":"<p>Applies the given value to the element.</p>\n\n<p>Normally the value is given as a string/number value and applied\nto the field content (textfield, textarea) or used to\ndetect whether the field is checked (checkbox, radiobutton).</p>\n\n<p>Supports array values for selectboxes (multiple-selection)\nand checkboxes or radiobuttons (for convenience).</p>\n\n<p>Please note: To modify the value attribute of a checkbox or\nradiobutton use {@link qx.bom.element.Attribute.set} instead.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"siblings"},children:[{type:"params",children:[{type:"param",attributes:{"defaultValue":"null","name":"selector"},children:[{type:"desc",attributes:{"text":"<p>Optional selector to filter the result</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Get a set of elements containing all of the unique siblings\nof each of the matched set of elements.</p>\n\n<p>Can be filtered with an optional expressions.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Collection of all unique sibling elements.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"toggleClass"},children:[{type:"params",children:[{type:"param",attributes:{"name":"name"},children:[{type:"desc",attributes:{"text":"<p>The class name to toggle</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Toggles a className of the selected elements</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"wrap"},children:[{type:"params",children:[{type:"param",attributes:{"name":"content"},children:[{type:"desc",attributes:{"text":"<p>Element or <span class=\"caps\">HTML</span> markup used for wrapping</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}},{type:"entry",attributes:{"type":"Element"}}]}]}]},{type:"desc",attributes:{"text":"<p>Wrap each matched element with the specified <span class=\"caps\">HTML</span> content.</p>\n\n<p>This wrapping process is most useful for injecting additional structure\ninto a document, without ruining the original semantic qualities of a\ndocument. This works by going through the first element provided (which\nis generated, on the fly, from the provided <span class=\"caps\">HTML</span>) and finds the deepest\ndescendant element within its structure&#8212;it is that element that will\nenwrap everything else.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"wrapAll"},children:[{type:"params",children:[{type:"param",attributes:{"name":"content"},children:[{type:"desc",attributes:{"text":"<p>Element or <span class=\"caps\">HTML</span> markup used for wrapping</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}},{type:"entry",attributes:{"type":"Element"}}]}]}]},{type:"desc",attributes:{"text":"<p>Wrap all the elements in the matched set into a single wrapper element.</p>\n\n<p>This is different from {@link #wrap} where each element in the matched set\nwould get wrapped with an element.</p>\n\n<p>This wrapping process is most useful for injecting additional structure\ninto a document, without ruining the original semantic qualities of\na document.</p>\n\n<p>This works by going through the first element provided (which is\ngenerated, on the fly, from the provided <span class=\"caps\">HTML</span>) and finds the deepest\ndescendant element within its structure&#8212;it is that element that\nwill enwrap everything else.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]},{type:"method",attributes:{"name":"wrapInner"},children:[{type:"params",children:[{type:"param",attributes:{"name":"content"},children:[{type:"desc",attributes:{"text":"<p>Element or <span class=\"caps\">HTML</span> markup used for wrapping</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}},{type:"entry",attributes:{"type":"Element"}}]}]}]},{type:"desc",attributes:{"text":"<p>Wrap the inner child contents of each matched element (including\ntext nodes) with an <span class=\"caps\">HTML</span> structure.</p>\n\n<p>This wrapping process is most useful for injecting additional structure\ninto a document, without ruining the original semantic qualities of a\ndocument. This works by going through the first element provided\n(which is generated, on the fly, from the provided <span class=\"caps\">HTML</span>) and finds the\ndeepest ancestor element within its structure&#8212;it is that element\nthat will enwrap everything else.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The collection is returned for chaining proposes</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Collection"}}]}]}]}]}]}