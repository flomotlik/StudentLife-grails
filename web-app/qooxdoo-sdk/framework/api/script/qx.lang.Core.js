{type:"class",attributes:{"isStatic":"true","name":"Core","packageName":"qx.lang","fullName":"qx.lang.Core","type":"bootstrap"},children:[{type:"desc",attributes:{"text":"<p>The intention of this class is to add features to native JavaScript\nobjects so that all browsers operate on a common JavaScript language level\n(particularly JavaScript 1.6).</p>\n\n<p>The methods defined in this class contain implementations of methods, which\nare not supported by all browsers. If a method is supported it points to\nthe native implementation, otherwise it contains an emulation function.</p>\n\n<p>For reference:</p>\n\n<ul>\n<li><a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\">http://www.ecma-international.org/publications/standards/Ecma-262.htm</a></li>\n<li><a href=\"http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference\">http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference</a></li>\n<li><a href=\"http://developer.mozilla.org/en/docs/New_in_JavaScript_1.6\">http://developer.mozilla.org/en/docs/New_in_JavaScript_1.6</a></li>\n</ul>\n\n<p>The following methods are added if they are not supported natively:</p>\n\n<ul>\n<li>Error.toString()</li>\n<li>Array.indexOf()</li>\n<li>Array.lastIndexOf()</li>\n<li>Array.forEach()</li>\n<li>Array.filter()</li>\n<li>Array.map()</li>\n<li>Array.some()</li>\n<li>Array.every()</li>\n<li>String.quote()</li>\n</ul>"}},{type:"methods-static",children:[{type:"method",attributes:{"isStatic":"true","name":"arrayEvery"},children:[{type:"params",children:[{type:"param",attributes:{"name":"callback"},children:[{type:"desc",attributes:{"text":"<p>Function to test for each element.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Function"}}]}]},{type:"param",attributes:{"name":"obj"},children:[{type:"desc",attributes:{"text":"<p>Object to use as <code>this</code> when executing <code>callback</code>.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Object"}}]}]}]},{type:"desc",attributes:{"text":"<p>Tests whether all elements in the array pass the test implemented by the provided function.</p>\n\n<code>every</code> executes the provided <code>callback</code> function once for each element\npresent in the array until it finds one where <code>callback</code> returns a false value. If\nsuch an element is found, the <code>every</code> method immediately returns <code>false</code>.\nOtherwise, if <code>callback</code> returned a true value for all elements, <code>every</code>\nwill return <code>true</code>.  <code>callback</code> is invoked only for indexes of the array\nwhich have assigned values; it is not invoked for indexes which have been deleted or which have\nnever been assigned values.\n\n<code>callback</code> is invoked with three arguments: the value of the element, the index of\nthe element, and the Array object being traversed.\n\n<p>If a <code>obj</code> parameter is provided to <code>every</code>, it will be used as\nthe <code>this</code> for each invocation of the <code>callback</code>. If it is not provided,\nor is <code>null</code>, the global object associated with <code>callback</code> is used instead.</p>\n\n<code>every</code> does not mutate the array on which it is called. The range of elements processed\nby <code>every</code> is set before the first invocation of <code>callback</code>. Elements which\nare appended to the array after the call to <code>every</code> begins will not be visited by\n<code>callback</code>.  If existing elements of the array are changed, their value as passed\nto <code>callback</code> will be the value at the time <code>every</code> visits them; elements\nthat are deleted are not visited.\n\n<p>Natively supported in Gecko since version 1.8.\n<a href=\"http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:every\">http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:every</a></p>"}},{type:"return",children:[{type:"types",children:[{type:"entry",attributes:{"type":"Boolean"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"arrayFilter"},children:[{type:"params",children:[{type:"param",attributes:{"name":"callback"},children:[{type:"desc",attributes:{"text":"<p>Function to test each element of the array.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Function"}}]}]},{type:"param",attributes:{"name":"obj"},children:[{type:"desc",attributes:{"text":"<p>Object to use as <code>this</code> when executing <code>callback</code>.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Object"}}]}]}]},{type:"desc",attributes:{"text":"<p>Creates a new array with all elements that pass the test implemented by the provided\nfunction.</p>\n\n<code>filter</code> calls a provided <code>callback</code> function once for each\nelement in an array, and constructs a new array of all the values for which\n<code>callback</code> returns a true value.  <code>callback</code> is invoked only\nfor indexes of the array which have assigned values; it is not invoked for indexes\nwhich have been deleted or which have never been assigned values.  Array elements which\ndo not pass the <code>callback</code> test are simply skipped, and are not included\nin the new array.\n\n<code>callback</code> is invoked with three arguments: the value of the element, the\nindex of the element, and the Array object being traversed.\n\n<p>If a <code>obj</code> parameter is provided to <code>filter</code>, it will\nbe used as the <code>this</code> for each invocation of the <code>callback</code>.\nIf it is not provided, or is <code>null</code>, the global object associated with\n<code>callback</code> is used instead.</p>\n\n<code>filter</code> does not mutate the array on which it is called. The range of\nelements processed by <code>filter</code> is set before the first invocation of\n<code>callback</code>. Elements which are appended to the array after the call to\n<code>filter</code> begins will not be visited by <code>callback</code>. If existing\nelements of the array are changed, or deleted, their value as passed to <code>callback</code>\nwill be the value at the time <code>filter</code> visits them; elements that are deleted\nare not visited.\n\n<p>Natively supported in Gecko since version 1.8.\n<a href=\"http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:filter\">http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:filter</a></p>"}},{type:"return",children:[{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"arrayForEach"},children:[{type:"params",children:[{type:"param",attributes:{"name":"callback"},children:[{type:"desc",attributes:{"text":"<p>Function to execute for each element.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Function"}}]}]},{type:"param",attributes:{"name":"obj"},children:[{type:"desc",attributes:{"text":"<p>Object to use as this when executing callback.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Object"}}]}]}]},{type:"desc",attributes:{"text":"<p>Executes a provided function once per array element.</p>\n\n<code>forEach</code> executes the provided function (<code>callback</code>) once for each\nelement present in the array.  <code>callback</code> is invoked only for indexes of the array\nwhich have assigned values; it is not invoked for indexes which have been deleted or which\nhave never been assigned values.\n\n<code>callback</code> is invoked with three arguments: the value of the element, the index\nof the element, and the Array object being traversed.\n\n<p>If a <code>obj</code> parameter is provided to <code>forEach</code>, it will be used\nas the <code>this</code> for each invocation of the <code>callback</code>.  If it is not\nprovided, or is <code>null</code>, the global object associated with <code>callback</code>\nis used instead.</p>\n\n<code>forEach</code> does not mutate the array on which it is called.\n\n<p>The range of elements processed by <code>forEach</code> is set before the first invocation of\n<code>callback</code>.  Elements which are appended to the array after the call to\n<code>forEach</code> begins will not be visited by <code>callback</code>. If existing elements\nof the array are changed, or deleted, their value as passed to <code>callback</code> will be\nthe value at the time <code>forEach</code> visits them; elements that are deleted are not visited.</p>\n\n<p>Natively supported in Gecko since version 1.8.\n<a href=\"http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:forEach\">http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:forEach</a></p>"}},{type:"return",children:[{type:"types",children:[{type:"entry",attributes:{"type":"void"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"arrayIndexOf"},children:[{type:"params",children:[{type:"param",attributes:{"name":"searchElement"},children:[{type:"desc",attributes:{"text":"<p>Element to locate in the array.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]},{type:"param",attributes:{"name":"fromIndex"},children:[{type:"desc",attributes:{"text":"<p>The index at which to begin the search. Defaults to 0, i.e. the whole\n        array will be searched. If the index is greater than or equal to the length of the array,\n        <code>-1</code> is returned, i.e. the array will not be searched. If negative, it is taken as the\n        offset from the end of the array. Note that even when the index is negative, the array is still\n        searched from front to back. If the calculated index is less than 0, the whole array will be searched.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"desc",attributes:{"text":"<p>Returns the first index at which a given element can be found in the array,\nor <code>-1</code> if it is not present. It compares <code>searchElement</code> to elements of the Array\nusing strict equality (the same method used by the <code>===</code>, or\ntriple-equals, operator).</p>\n\n<p>Natively supported in Gecko since version 1.8.\n<a href=\"http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:indexOf\">http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:indexOf</a></p>"}},{type:"return",children:[{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"arrayLastIndexOf"},children:[{type:"params",children:[{type:"param",attributes:{"name":"searchElement"},children:[{type:"desc",attributes:{"text":"<p>Element to locate in the array.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]},{type:"param",attributes:{"name":"fromIndex"},children:[{type:"desc",attributes:{"text":"<p>The index at which to start searching backwards.\n        Defaults to the array&#8217;s length, i.e. the whole array will be searched. If\n        the index is greater than or equal to the length of the array, the whole array\n        will be searched. If negative, it is taken as the offset from the end of the\n        array. Note that even when the index is negative, the array is still searched\n        from back to front. If the calculated index is less than 0, -1 is returned,\n        i.e. the array will not be searched.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"desc",attributes:{"text":"<p>Returns the last index at which a given element can be found in the array, or <code>-1</code>\nif it is not present. The array is searched backwards, starting at <code>fromIndex</code>.\nIt compares <code>searchElement</code> to elements of the Array using strict equality\n(the same method used by the <code>===</code>, or triple-equals, operator).</p>\n\n<p>Natively supported in Gecko since version 1.8.\n<a href=\"http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:lastIndexOf\">http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:lastIndexOf</a></p>"}},{type:"return",children:[{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"arrayMap"},children:[{type:"params",children:[{type:"param",attributes:{"name":"callback"},children:[{type:"desc",attributes:{"text":"<p>Function produce an element of the new Array from an element of the current one.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Function"}}]}]},{type:"param",attributes:{"name":"obj"},children:[{type:"desc",attributes:{"text":"<p>Object to use as <code>this</code> when executing <code>callback</code>.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Object"}}]}]}]},{type:"desc",attributes:{"text":"<p>Creates a new array with the results of calling a provided function on every element in this array.</p>\n\n<code>map</code> calls a provided <code>callback</code> function once for each element in an array,\nin order, and constructs a new array from the results.  <code>callback</code> is invoked only for\nindexes of the array which have assigned values; it is not invoked for indexes which have been\ndeleted or which have never been assigned values.\n\n<code>callback</code> is invoked with three arguments: the value of the element, the index of the\nelement, and the Array object being traversed.\n\n<p>If a <code>obj</code> parameter is provided to <code>map</code>, it will be used as the\n<code>this</code> for each invocation of the <code>callback</code>. If it is not provided, or is\n<code>null</code>, the global object associated with <code>callback</code> is used instead.</p>\n\n<code>map</code> does not mutate the array on which it is called.\n\n<p>The range of elements processed by <code>map</code> is set before the first invocation of\n<code>callback</code>. Elements which are appended to the array after the call to <code>map</code>\nbegins will not be visited by <code>callback</code>.  If existing elements of the array are changed,\nor deleted, their value as passed to <code>callback</code> will be the value at the time\n<code>map</code> visits them; elements that are deleted are not visited.</p>\n\n<p>Natively supported in Gecko since version 1.8.\n<a href=\"http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:map\">http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:map</a></p>"}},{type:"return",children:[{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"errorToString"},children:[{type:"desc",attributes:{"text":"<p>Some browsers (e.g. Internet Explorer) do not support to stringify\nerror objects like other browsers usually do. This feature is added to\nthose browsers.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Error message</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"stringQuote"},children:[{type:"desc",attributes:{"text":"<p>Surrounds the string with double quotes and escapes all double quotes\nand backslashes within the string.</p>\n\n<p>Note: Not part of ECMAScript Language Specification <span class=\"caps\">ECMA</span>-262\n      3rd edition (December 1999), but implemented by Gecko:\n      <a href=\"http://lxr.mozilla.org/seamonkey/source/js/src/jsstr.c\">http://lxr.mozilla.org/seamonkey/source/js/src/jsstr.c</a></p>"}},{type:"return",children:[{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]}]}]}