{type:"class",attributes:{"name":"BaseString","packageName":"qx.type","childClasses":"qx.locale.LocalizedString","fullName":"qx.type.BaseString","type":"class"},children:[{type:"desc",attributes:{"text":"<p>This class extends the built-in JavaScript String class. It can be used as\nbase class for classes, which need to derive from String.</p>\n\n<p>Instances of this class can be used in any place a JavaScript string can.</p>"}},{type:"constructor",children:[{type:"method",attributes:{"isCtor":"true","name":"ctor"},children:[{type:"params",children:[{type:"param",attributes:{"defaultValue":"\"\"","name":"txt"},children:[{type:"desc",attributes:{"text":"<p>Initialize with this string</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]}]}]},{type:"methods",children:[{type:"method",attributes:{"name":"base"},children:[{type:"params",children:[{type:"param",attributes:{"name":"args"},children:[{type:"desc",attributes:{"text":"<p>the arguments variable of the calling method</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"arguments"}}]}]},{type:"param",attributes:{"name":"varags"},children:[{type:"desc",attributes:{"text":"<p>variable number of arguments passed to the overwritten function</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Call the same method of the super class.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>the return value of the method of the base class.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"method",attributes:{"name":"charAt"},children:[{type:"params",children:[{type:"param",attributes:{"name":"index"},children:[{type:"desc",attributes:{"text":"<p>An integer between 0 and 1 less than the length\n  of the string.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"desc",attributes:{"text":"<p>Returns the specified character from a string.</p>\n\n<p>Characters in a string are indexed from left to right. The index of the\nfirst character is 0, and the index of the last character in a string\ncalled stringName is stringName.length &#8211; 1. If the index you supply is\nout of range, JavaScript returns an empty string.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The character.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"method",attributes:{"name":"charCodeAt"},children:[{type:"params",children:[{type:"param",attributes:{"name":"index"},children:[{type:"desc",attributes:{"text":"<p>An integer greater than 0 and less than the length\n  of the string; if it is not a number, it defaults to 0.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"desc",attributes:{"text":"<p>Returns a number indicating the Unicode value of the character at the given index.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The number.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"method",attributes:{"name":"concat"},children:[{type:"params",children:[{type:"param",attributes:{"name":"stringN"},children:[{type:"desc",attributes:{"text":"<p>One or more strings to be combined.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Combines the text of two or more strings and returns a new string.\nChanges to the text in one string do not affect the other string.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The combined string.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"method",attributes:{"name":"indexOf"},children:[{type:"params",children:[{type:"param",attributes:{"name":"index"},children:[{type:"desc",attributes:{"text":"<p>A string representing the value to search for.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]},{type:"param",attributes:{"defaultValue":"0","name":"offset"},children:[{type:"desc",attributes:{"text":"<p>The location within the calling string to start\n  the search from. It can be any integer between 0 and the length of the\n  string. The default value is 0.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"desc",attributes:{"text":"<p>Returns the index within the calling String object of the first\noccurrence of the specified value, starting the search at fromIndex,\nreturns -1 if the value is not found.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The index or -1.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"method",attributes:{"name":"lastIndexOf"},children:[{type:"params",children:[{type:"param",attributes:{"name":"index"},children:[{type:"desc",attributes:{"text":"<p>A string representing the value to search for.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]},{type:"param",attributes:{"defaultValue":"0","name":"offset"},children:[{type:"desc",attributes:{"text":"<p>The location within the calling string to start\n  the search from, indexed from left to right. It can be any integer\n  between 0 and the length of the string. The default value is the length\n   of the string.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"desc",attributes:{"text":"<p>Returns the index within the calling String object of the last occurrence\nof the specified value, or -1 if not found. The calling string is\nsearched backward, starting at fromIndex.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The index or -1.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"method",attributes:{"name":"match"},children:[{type:"params",children:[{type:"param",attributes:{"name":"regexp"},children:[{type:"desc",attributes:{"text":"<p>A regular expression object. If a non-RegExp object\n obj is passed, it is implicitly converted to a RegExp by using\n  new RegExp(obj).</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Object"}}]}]}]},{type:"desc",attributes:{"text":"<p>Used to retrieve the matches when matching a string against a regular\nexpression.</p>\n\n<p>If the regular expression does not include the g flag, returns the same\nresult as regexp.exec(string). If the regular expression includes the g\nflag, the method returns an Array containing all matches.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The matching RegExp object or an array containing all\n  matches.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Object"}}]}]}]},{type:"method",attributes:{"name":"replace"},children:[{type:"params",children:[{type:"param",attributes:{"name":"regexp"},children:[{type:"desc",attributes:{"text":"<p>A RegExp object. The match is replaced by the\n  return value of parameter #2. Or a String that is to be replaced by\n  newSubStr.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Object"}}]}]},{type:"param",attributes:{"name":"aFunction"},children:[{type:"desc",attributes:{"text":"<p>A function to be invoked to create the new\n  substring (to put in place of the substring received from parameter\n  #1).</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Function"}}]}]}]},{type:"desc",attributes:{"text":"<p>Finds a match between a regular expression and a string, and replaces the\nmatched substring with a new substring.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The new substring.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"method",attributes:{"name":"search"},children:[{type:"params",children:[{type:"param",attributes:{"name":"regexp"},children:[{type:"desc",attributes:{"text":"<p>A regular expression object. If a non-RegExp object\n obj is passed, it is implicitly converted to a RegExp by using\n  new RegExp(obj).</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Object"}}]}]}]},{type:"desc",attributes:{"text":"<p>Executes the search for a match between a regular expression and this\nString object.</p>\n\n<p>If successful, search returns the index of the regular expression inside\nthe string. Otherwise, it returns -1.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The matching RegExp object or -1.\n  matches.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Object"}}]}]}]},{type:"method",attributes:{"name":"slice"},children:[{type:"params",children:[{type:"param",attributes:{"name":"beginslice"},children:[{type:"desc",attributes:{"text":"<p>The zero-based index at which to begin\n  extraction.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]},{type:"param",attributes:{"defaultValue":"null","name":"endSlice"},children:[{type:"desc",attributes:{"text":"<p>The zero-based index at which to end\n  extraction. If omitted, slice extracts to the end of the string.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"desc",attributes:{"text":"<p>Extracts a section of a string and returns a new string.</p>\n\n<p>Slice extracts the text from one string and returns a new string. Changes\nto the text in one string do not affect the other string.\nAs a negative index, endSlice indicates an offset from the end of the\nstring.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The extracted string.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"method",attributes:{"name":"split"},children:[{type:"params",children:[{type:"param",attributes:{"defaultValue":"null","name":"separator"},children:[{type:"desc",attributes:{"text":"<p>Specifies the character to use for\n  separating the string. The separator is treated as a string or a regular\n  expression. If separator is omitted, the array returned contains one\n  element consisting of the entire string.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]},{type:"param",attributes:{"defaultValue":"null","name":"limit"},children:[{type:"desc",attributes:{"text":"<p>Integer specifying a limit on the number of\n  splits to be found.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"desc",attributes:{"text":"<p>Splits a String object into an array of strings by separating the string\ninto substrings.</p>\n\n<p>When found, separator is removed from the string and the substrings are\nreturned in an array. If separator is omitted, the array contains one\nelement consisting of the entire string.</p>\n\n<p>If separator is a regular expression that contains capturing parentheses,\nthen each time separator is matched the results (including any undefined\nresults) of the capturing parentheses are spliced into the output array.\nHowever, not all browsers support this capability.</p>\n\n<p>Note: When the string is empty, split returns an array containing one</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The Array containing substrings.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Array"}}]}]}]},{type:"method",attributes:{"name":"substr"},children:[{type:"params",children:[{type:"param",attributes:{"name":"start"},children:[{type:"desc",attributes:{"text":"<p>Location at which to begin extracting characters\n  (an integer between 0 and one less than the length of the string).</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]},{type:"param",attributes:{"defaultValue":"null","name":"length"},children:[{type:"desc",attributes:{"text":"<p>The number of characters to extract.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"desc",attributes:{"text":"<p>Returns the characters in a string beginning at the specified location\nthrough the specified number of characters.</p>\n\n<p>Start is a character index. The index of the first character is 0, and the\nindex of the last character is 1 less than the length of the string. substr\n begins extracting characters at start and collects length characters\n(unless it reaches the end of the string first, in which case it will\nreturn fewer).\nIf start is positive and is greater than or equal to the length of the\nstring, substr returns an empty string.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The substring.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"method",attributes:{"name":"substring"},children:[{type:"params",children:[{type:"param",attributes:{"name":"indexA"},children:[{type:"desc",attributes:{"text":"<p>An integer between 0 and one less than the\n  length of the string.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]},{type:"param",attributes:{"defaultValue":"null","name":"indexB"},children:[{type:"desc",attributes:{"text":"<p>(optional) An integer between 0 and the\n  length of the string.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"desc",attributes:{"text":"<p>Returns a subset of a String object.</p>\n\n<p>substring extracts characters from indexA up to but not including indexB.\nIn particular:\nIf indexA equals indexB, substring returns an empty string.\nIf indexB is omitted, substring extracts characters to the end of the\nstring.\nIf either argument is less than 0 or is NaN, it is treated as if it were\n0.\nIf either argument is greater than stringName.length, it is treated as if\nit were stringName.length.\nIf indexA is larger than indexB, then the effect of substring is as if\nthe two arguments were swapped; for example, str.substring(1, 0) == str.substring(0, 1).</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The subset.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"method",attributes:{"name":"toHashCode"},children:[{type:"desc",attributes:{"text":"<p>Return unique hash code of object</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>unique hash code of the object</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"method",attributes:{"name":"toLocaleLowerCase"},children:[{type:"desc",attributes:{"text":"<p>The characters within a string are converted to lower case while\nrespecting the current locale.</p>\n\n<p>The toLowerCase method returns the value of the string converted to\nlowercase. toLowerCase does not affect the value of the string itself.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The new string.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"method",attributes:{"name":"toLocaleUpperCase"},children:[{type:"desc",attributes:{"text":"<p>The characters within a string are converted to upper case while\nrespecting the current locale.\nThe toUpperCase method returns the value of the string converted to\nuppercase. toUpperCase does not affect the value of the string itself.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The new string.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"method",attributes:{"name":"toLowerCase"},children:[{type:"desc",attributes:{"text":"<p>Returns the calling string value converted to lowercase.\nThe toLowerCase method returns the value of the string converted to\nlowercase. toLowerCase does not affect the value of the string itself.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The new string.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"method",attributes:{"name":"toString"},children:[{type:"desc",attributes:{"text":"<p>Returns a string representing the specified object.</p>\n\n<p>The valueOf method of String returns the primitive value of a String\nobject as a string data type.\nThis method is usually called internally by JavaScript and not\nexplicitly in code.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>A new string containing the string value.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"method",attributes:{"name":"toUpperCase"},children:[{type:"desc",attributes:{"text":"<p>Returns the calling string value converted to uppercase.\nThe toUpperCase method returns the value of the string converted to\nuppercase. toUpperCase does not affect the value of the string itself.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The new string.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"method",attributes:{"name":"valueOf"},children:[{type:"desc",attributes:{"text":"<p>Returns the primitive value of a String object.</p>\n\n<p>The valueOf method of String returns the primitive value of a String\nobject as a string data type.\nThis method is usually called internally by JavaScript and not\nexplicitly in code.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>A new string containing the primitive value.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]}]}]}