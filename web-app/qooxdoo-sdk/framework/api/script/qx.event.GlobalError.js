{type:"class",attributes:{"isStatic":"true","name":"GlobalError","packageName":"qx.event","fullName":"qx.event.GlobalError","type":"bootstrap"},children:[{type:"desc",attributes:{"text":"<p>The GlobalError class stores a reference to a global error handler function.</p>\n\n<p>This function is called for each uncatched JavaScript exception. To enable\n global error handling the setting <code>qx.globalErrorHandling</code> bust\n be enabled and a error handler must be registered.\n Further each JavaScript &#8220;entry point&#8221; must be wrapped with a call to\n {@link qx.event.GlobalError#observeMethod}.</p>"}},{type:"methods-static",children:[{type:"method",attributes:{"access":"private","isStatic":"true","name":"__onErrorWindow"},children:[{type:"params",children:[{type:"param",attributes:{"name":"msg"},children:[{type:"desc",attributes:{"text":"<p>browser error message</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]},{type:"param",attributes:{"name":"uri"},children:[{type:"desc",attributes:{"text":"<p>uri to errornous script</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]},{type:"param",attributes:{"name":"lineNumber"},children:[{type:"desc",attributes:{"text":"<p>line number of error</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"desc",attributes:{"text":"<p>Catches all errors of the <code>window.onerror</code> handler\nand passes an {@link qx.core.WindowError} object to the error\nhandling.</p>"}}]},{type:"method",attributes:{"isStatic":"true","name":"handleError"},children:[{type:"params",children:[{type:"param",attributes:{"name":"ex"},children:[{type:"desc",attributes:{"text":"<p>Exception to delegate</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"qx.core.WindowError"}},{type:"entry",attributes:{"type":"exception"}}]}]}]},{type:"desc",attributes:{"text":"<p>Delegates every given exception to the registered error handler</p>"}}]},{type:"method",attributes:{"isStatic":"true","name":"observeMethod"},children:[{type:"params",children:[{type:"param",attributes:{"name":"method"},children:[{type:"desc",attributes:{"text":"<p>method to wrap</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Function"}}]}]}]},{type:"desc",attributes:{"text":"<p>Wraps a method with error handling code. Only methods, which are called\ndirectly by the browser (e.g. event handler) should be wrapped.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The function wrapped with error handling code</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Function"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"setErrorHandler"},children:[{type:"params",children:[{type:"param",attributes:{"name":"callback"},children:[{type:"desc",attributes:{"text":"<p>The error handler. The first argument is the\n   exception, which caused the error</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Function"}}]}]},{type:"param",attributes:{"name":"context"},children:[{type:"desc",attributes:{"text":"<p>The &#8220;this&#8221; context of the callback function</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Object"}}]}]}]},{type:"desc",attributes:{"text":"<p>Set the global fallback error handler</p>"}}]}]}]}