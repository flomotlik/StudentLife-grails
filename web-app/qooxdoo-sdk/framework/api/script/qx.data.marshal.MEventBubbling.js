{type:"class",attributes:{"name":"MEventBubbling","packageName":"qx.data.marshal","includer":"qx.data.Array","fullName":"qx.data.marshal.MEventBubbling","type":"mixin"},children:[{type:"desc",attributes:{"text":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>Mixin used for the bubling events. If you want to use this in your own model\nclasses, be sure that every property will call the\n{@link #_applyEventPropagation} function on every change.</p>"}},{type:"events",children:[{type:"event",attributes:{"name":"changeBubble"},children:[{type:"desc",attributes:{"text":"<p>The change event which will be fired on every change in the model no\nmatter what property changes. This event bubbles so the root model will\nfire a change event on every change of its children properties too.</p>\n\n<p>The data will contain a map with the following three keys\n  <li>value: The new value of the property</li>\n  <li>name: The name of the property changed including its parent\n    properties separated by dots.</li>\n  <li>old: The old value of the property.</li>\nDue to that, the <code>getOldData</code> method will always return null\nbecause the old data is contained in the map.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"qx.event.type.Data"}}]}]}]},{type:"methods",children:[{type:"method",attributes:{"access":"private","isMixin":"true","name":"__changePropertyListener"},children:[{type:"params",children:[{type:"param",attributes:{"name":"name"},children:[{type:"desc",attributes:{"text":"<p>The name of the former properties.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]},{type:"param",attributes:{"name":"e"},children:[{type:"desc",attributes:{"text":"<p>The date event fired by the property\n  change.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"qx.event.type.Data"}}]}]}]},{type:"desc",attributes:{"text":"<p>Listener responsible for formating the name and firing the change event\nfor the changed property.</p>"}}]},{type:"method",attributes:{"access":"protected","isMixin":"true","name":"_applyEventPropagation"},children:[{type:"params",children:[{type:"param",attributes:{"name":"value"},children:[{type:"desc",attributes:{"text":"<p>The new value of the property.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]},{type:"param",attributes:{"name":"old"},children:[{type:"desc",attributes:{"text":"<p>The old value of the property.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]},{type:"param",attributes:{"name":"name"},children:[{type:"desc",attributes:{"text":"<p>The name of the changed property.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Apply function for every property created with the\n{@link qx.data.marshal.Json} marshaler. It fires and\n{@link #changeBubble} event on every change. It also adds the chaining\nlistener if possible which is necessary for the bubbling of the events.</p>"}}]},{type:"method",attributes:{"access":"protected","isMixin":"true","name":"_registerEventChaining"},children:[{type:"params",children:[{type:"param",attributes:{"name":"value"},children:[{type:"desc",attributes:{"text":"<p>The new value of the property.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]},{type:"param",attributes:{"name":"old"},children:[{type:"desc",attributes:{"text":"<p>The old value of the property.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]},{type:"param",attributes:{"name":"name"},children:[{type:"desc",attributes:{"text":"<p>The name of the changed property.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Registers for the given parameters the changeBubble listener, if\npossible. It also removes the old listener, if an old item with\na changeBubble event is given.</p>"}}]}]}]}