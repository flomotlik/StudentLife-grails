{type:"class",attributes:{"name":"Array","packageName":"qx.data","mixins":"qx.data.marshal.MEventBubbling","superClass":"qx.core.Object","fullName":"qx.data.Array","type":"class","interfaces":"qx.data.IListData"},children:[{type:"desc",attributes:{"text":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>The data array is a special array used in the data binding context of\nqooxdoo. It does not extend the native array of JavaScript but its a wrapper\nfor it. All the native methods are included in the implementation and it\nalso fires events if the content or the length of the array changes in\nany way. Also the <code>.length</code> property is available on the array.</p>"}},{type:"constructor",children:[{type:"method",attributes:{"overriddenFrom":"qx.core.Object","isCtor":"true","name":"ctor"},children:[{type:"params",children:[{type:"param",attributes:{"name":"param"},children:[{type:"desc",attributes:{"text":"<p>The parameter can be some types.</p>\n\n<p>Without a parameter a new blank array will be created.</p>\n\n<p>If there is more than one parameter is given, the parameter will be\n  added directly to the new array.</p>\n\n<p>If the parameter is a number, a new Array with the given length will be\n  created.</p>\n\n<p>If the parameter is a javascript array, a new array containing the given\n  elements will be created.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Creates a new instance of an array.</p>"}}]}]},{type:"events",children:[{type:"event",attributes:{"name":"change"},children:[{type:"desc",attributes:{"text":"<p>The change event which will be fired if there is a change in the array.\nThe data contains a map with three key value pairs:\n<li>start: The start index of the change.</li>\n<li>end: The end index of the change.</li>\n<li>type: The type of the change as a String. This can be &#8216;add&#8217;,\n&#8216;remove&#8217; or &#8216;order&#8217;</li>\n<li>items: The items which has been changed (as a JavaScript array).</li></p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"qx.event.type.Data"}}]}]},{type:"event",attributes:{"name":"changeLength"},children:[{type:"desc",attributes:{"text":"<p>The changeLength event will be fired every time the length of the\narray changes.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"qx.event.type.Event"}}]}]}]},{type:"methods",children:[{type:"method",attributes:{"access":"private","name":"__updateLength"},children:[{type:"desc",attributes:{"text":"<p>Internal function which updates the length property of the array.\nEvery time the length will be updated, a {@link #changeLength} data\nevent will be fired.</p>"}}]},{type:"method",attributes:{"name":"append"},children:[{type:"params",children:[{type:"param",attributes:{"name":"array"},children:[{type:"desc",attributes:{"text":"<p>The items of this array will be appended.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Array"}}]}]}]},{type:"desc",attributes:{"text":"<p>Append the items of the given array.</p>"}}]},{type:"method",attributes:{"name":"concat"},children:[{type:"params",children:[{type:"param",attributes:{"name":"array"},children:[{type:"desc",attributes:{"text":"<p>The javaScript array which should be concatenated\n  to the current array.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Array"}}]}]}]},{type:"desc",attributes:{"text":"<p>Concatenates the current and the given array into a new one.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>A new array containing the values of both former\n  arrays.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"qx.data.Array"}}]}]}]},{type:"method",attributes:{"name":"contains"},children:[{type:"params",children:[{type:"param",attributes:{"name":"item"},children:[{type:"desc",attributes:{"text":"<p>The item which is possibly in the array.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Check if the given item is in the current array.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>true, if the array contains the given item.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"boolean"}}]}]}]},{type:"method",attributes:{"name":"copy"},children:[{type:"desc",attributes:{"text":"<p>Return a copy of the given arr</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>copy of this</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"qx.data.Array"}}]}]}]},{type:"method",attributes:{"name":"equals"},children:[{type:"params",children:[{type:"param",attributes:{"name":"array"},children:[{type:"desc",attributes:{"text":"<p>The array to check.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Array"}}]}]}]},{type:"desc",attributes:{"text":"<p>Check whether the given array has the same content as this.\nChecks only the equality of the arrays&#8217; content.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Whether the two arrays are equal.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Boolean"}}]}]}]},{type:"method",attributes:{"name":"getItem"},children:[{type:"params",children:[{type:"param",attributes:{"name":"index"},children:[{type:"desc",attributes:{"text":"<p>The index requested of the array element.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Number"}}]}]}]},{type:"desc",attributes:{"text":"<p>Replacement function for the getting of the array value.\narray<sup class=\"footnote\"><a href=\"#fn0\">0</a></sup> should be array.getItem(0).</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The element at the given index.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"method",attributes:{"name":"getLength"},children:[{type:"desc",attributes:{"text":"<p>This method returns the current length stored under .length on each\narray.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The current length of the array.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Number"}}]}]}]},{type:"method",attributes:{"name":"indexOf"},children:[{type:"params",children:[{type:"param",attributes:{"name":"item"},children:[{type:"desc",attributes:{"text":"<p>The item of which the index should be returned.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Returns the index of the item in the array. If the item is not in the\narray, -1 will be returned.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The Index of the given item.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"number"}}]}]}]},{type:"method",attributes:{"name":"insertAfter"},children:[{type:"params",children:[{type:"param",attributes:{"name":"after"},children:[{type:"desc",attributes:{"text":"<p>Insert item after this object.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]},{type:"param",attributes:{"name":"item"},children:[{type:"desc",attributes:{"text":"<p>Object to be inserted.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Insert an element into the array after a given item.</p>"}}]},{type:"method",attributes:{"name":"insertAt"},children:[{type:"params",children:[{type:"param",attributes:{"name":"index"},children:[{type:"desc",attributes:{"text":"<p>Position where to insert the item.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]},{type:"param",attributes:{"name":"item"},children:[{type:"desc",attributes:{"text":"<p>The element to insert.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Insert an element at a given position.</p>"}}]},{type:"method",attributes:{"name":"insertBefore"},children:[{type:"params",children:[{type:"param",attributes:{"name":"before"},children:[{type:"desc",attributes:{"text":"<p>Insert item before this object.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]},{type:"param",attributes:{"name":"item"},children:[{type:"desc",attributes:{"text":"<p>The item to be inserted.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Insert an item into the array before a given item.</p>"}}]},{type:"method",attributes:{"name":"join"},children:[{type:"params",children:[{type:"param",attributes:{"name":"connector"},children:[{type:"desc",attributes:{"text":"<p>the string which should be used to past in\n between of the array values.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Returns the array as a string using the given connector string to\nconnect the values.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The array as a string.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"method",attributes:{"name":"max"},children:[{type:"desc",attributes:{"text":"<p>Returns the highest value in the given array.\nSupports numeric values only.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The highest of all values or undefined if the\n  array is empty.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Number"}},{type:"entry",attributes:{"type":"null"}}]}]}]},{type:"method",attributes:{"name":"min"},children:[{type:"desc",attributes:{"text":"<p>Returns the lowest value in the array. Supports\nnumeric values only.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The lowest of all values or undefined\n  if the array is empty.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Number"}},{type:"entry",attributes:{"type":"null"}}]}]}]},{type:"method",attributes:{"name":"pop"},children:[{type:"desc",attributes:{"text":"<p>Removes and returns the last element of the array.\nAn change event will be fired.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The last element of the array.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"method",attributes:{"name":"push"},children:[{type:"params",children:[{type:"param",attributes:{"name":"varargs"},children:[{type:"desc",attributes:{"text":"<p>Multiple elements. Every element will be added to\n  the end of the array. An change event will be fired.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Adds a element at the end of the array.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The new length of the array.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Number"}}]}]}]},{type:"method",attributes:{"name":"remove"},children:[{type:"params",children:[{type:"param",attributes:{"name":"item"},children:[{type:"desc",attributes:{"text":"<p>Item to be removed from the array.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Remove the given item.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The removed item.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"method",attributes:{"name":"removeAll"},children:[{type:"desc",attributes:{"text":"<p>Remmove all elements from the array.</p>"}}]},{type:"method",attributes:{"name":"removeAt"},children:[{type:"params",children:[{type:"param",attributes:{"name":"index"},children:[{type:"desc",attributes:{"text":"<p>Index of the item to be removed.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"desc",attributes:{"text":"<p>Remove an element from the array at the given index.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The removed item.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"method",attributes:{"name":"reverse"},children:[{type:"desc",attributes:{"text":"<p>Reverses the order of the array. An change event will be fired.</p>"}}]},{type:"method",attributes:{"name":"setItem"},children:[{type:"params",children:[{type:"param",attributes:{"name":"index"},children:[{type:"desc",attributes:{"text":"<p>The index of the array element.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Number"}}]}]},{type:"param",attributes:{"name":"item"},children:[{type:"desc",attributes:{"text":"<p>The new item to set.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Replacement function for the setting of a array value.\narray<sup class=\"footnote\"><a href=\"#fn0\">0</a></sup> = &#8220;a&#8221; should be array.setItem(0, &#8220;a&#8221;).\nA change event will be fired.</p>"}}]},{type:"method",attributes:{"name":"shift"},children:[{type:"desc",attributes:{"text":"<p>Removes the first element of the array and returns it. An change event\nwill be fired.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>the former first element.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"method",attributes:{"name":"slice"},children:[{type:"params",children:[{type:"param",attributes:{"name":"from"},children:[{type:"desc",attributes:{"text":"<p>The start index.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Number"}}]}]},{type:"param",attributes:{"name":"to"},children:[{type:"desc",attributes:{"text":"<p>The end index.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Number"}}]}]}]},{type:"desc",attributes:{"text":"<p>Returns a new array with the values specified by the parameter.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>A new array containing the given range of values.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"qx.data.Array"}}]}]}]},{type:"method",attributes:{"name":"sort"},children:[{type:"params",children:[{type:"param",attributes:{"name":"func"},children:[{type:"desc",attributes:{"text":"<p>A compare function comparing two parameters and\n  should return a number.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Function"}}]}]}]},{type:"desc",attributes:{"text":"<p>Sorts the array. If a sort function is given, this will be used to\ncompare the items.</p>"}}]},{type:"method",attributes:{"name":"splice"},children:[{type:"params",children:[{type:"param",attributes:{"name":"startIndex"},children:[{type:"desc",attributes:{"text":"<p>The index where the splice should start</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]},{type:"param",attributes:{"name":"amount"},children:[{type:"desc",attributes:{"text":"<p>Defines number of element which will be removed\n  at the given position.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]},{type:"param",attributes:{"name":"varargs"},children:[{type:"desc",attributes:{"text":"<p>All following parameters will be added at the given\n  position to the array.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Method to remove and add new element to the array. For every remove or\nadd an event will be fired.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>An array containing the removed elements.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"qx.data.Array"}}]}]}]},{type:"method",attributes:{"name":"sum"},children:[{type:"desc",attributes:{"text":"<p>Returns the sum of all values in the array. Supports\nnumeric values only.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The sum of all values.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Number"}}]}]}]},{type:"method",attributes:{"docFrom":"qx.data.IListData","name":"toArray"}},{type:"method",attributes:{"overriddenFrom":"qx.core.Object","name":"toString"},children:[{type:"desc",attributes:{"text":"<p>Returns the toString of the original Array</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The array as a string.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"method",attributes:{"name":"unshift"},children:[{type:"params",children:[{type:"param",attributes:{"name":"varargs"},children:[{type:"desc",attributes:{"text":"<p>As many elements as you want to add to the beginning.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Adds the given items to the beginning of the array. For every element,\na change event will be fired.</p>"}}]}]}]}